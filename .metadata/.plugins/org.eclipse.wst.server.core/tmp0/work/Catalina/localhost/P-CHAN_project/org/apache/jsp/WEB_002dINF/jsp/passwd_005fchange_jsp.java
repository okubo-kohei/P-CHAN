/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2023-01-30 04:48:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import dao.MemberDao;
import dto.MemberDto;
import model.Crypto;

public final class passwd_005fchange_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("dao.MemberDao");
    _jspx_imports_classes.add("model.Crypto");
    _jspx_imports_classes.add("dto.MemberDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<!--10 パスワード変更-->\r\n");
      out.write("<html lang=\"ja\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>p-chan||パスワード変更</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/passwd_change.css\">\r\n");
      out.write("<script src=\"js/passwordCheck.js\"></script>\r\n");
      out.write("<script src=\"js/sha256.js\"></script>\r\n");
      out.write("</head>\r\n");

HttpSession ses = request.getSession();
String challenge = (String)ses.getAttribute("CHALLENGE");
String error = (String)ses.getAttribute("ERRORPWD");

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>パスワード変更</h1>\r\n");
      out.write("	<p id=\"ir\">\r\n");
      out.write("		<!--input required-->\r\n");
      out.write("		※は入力必須\r\n");
      out.write("	</p>\r\n");
      out.write("	");

		if(error != null){
	
      out.write("\r\n");
      out.write("			パスワードの変更に失敗しました\r\n");
      out.write("	");

		}
	
      out.write("\r\n");
      out.write("	<form action=\"FromPasswdChangeServlet\" method=\"post\" id=\"form\">\r\n");
      out.write("		<dl>\r\n");
      out.write("			<dt>\r\n");
      out.write("			<!-- ここから -->\r\n");
      out.write("				<span class=\"must\">※</span>現在のパスワード\r\n");
      out.write("			</dt>\r\n");
      out.write("			<dd>\r\n");
      out.write("				<input type=\"hidden\" type=\"password\" value=\"");
      out.print(challenge);
      out.write("\" name=\"challenge\" id=\"challenge\">\r\n");
      out.write("				<input type=\"password\" name=\"nowPass\" id=\"nowPass\" required>\r\n");
      out.write("			</dd>\r\n");
      out.write("\r\n");
      out.write("			<dt>\r\n");
      out.write("				<span class=\"must\">※</span>新しいパスワード\r\n");
      out.write("			</dt>\r\n");
      out.write("			<dd>\r\n");
      out.write("				<input type=\"password\" name=\"password\" id=\"password\" minlength=\"8\"required>\r\n");
      out.write("			</dd>\r\n");
      out.write("			<dt>\r\n");
      out.write("				<span class=\"must\">※</span>新しいパスワード(確認)\r\n");
      out.write("			</dt>\r\n");
      out.write("			<dd>\r\n");
      out.write("				<input type=\"password\" name=\"passwordCheck\" id=\"passwordCheck\"\r\n");
      out.write("					oninput=\"checkPassword(this)\" required>\r\n");
      out.write("			</dd>\r\n");
      out.write("		</dl>\r\n");
      out.write("		<input type=\"submit\" value=\"確定\" id=\"cng_url\">\r\n");
      out.write("		<!--11 会員情報変更完了-->\r\n");
      out.write("	</form>\r\n");
      out.write("	<form action=\"MovingMember\">\r\n");
      out.write("		<input type=\"submit\" value=\"会員情報へ\" id=\"mem_url\">\r\n");
      out.write("	</form>\r\n");
      out.write("	<!--16 会員情報表示-->\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("<footer> </footer>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
